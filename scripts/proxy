#!/usr/bin/python3

from http.server import SimpleHTTPRequestHandler
from urllib.parse import urlparse
from socketserver import TCPServer
from hashlib import sha256
from ecdsa import SECP256k1, SigningKey
import traceback
import sys
import requests
import json

LOCALHOST = "127.0.0.1"
SERVICES = {
    "/blockbook": 19121,
    "/WabiSabi": 37127,
    "/Cryptography": 37128
}

def replace_html_links(html, base):
    # replace 127.0.0.1:19121 to absolute with key (in faucet.html)
    for key in SERVICES:
        host = f"http://{LOCALHOST}:{SERVICES[key]}"
        html = html.replace(host, key)
    # replace absoulte links (blockbook styles + links, swagger)
    html = html.replace('href="/', 'href="' + base + '/')
    return html

def get_service(path, referer, strip_key = True):
    host = f"{LOCALHOST}:8080" # default service (faucet)
    service_key = ''
    for key in SERVICES:
        search_key = f"{key}/"
        if (path.startswith(search_key)):
            host = f"{LOCALHOST}:{SERVICES[key]}"
            # strip service key conditionally. see do_POST
            if (strip_key):
                path = path[len(key):len(path)]
            service_key = key
        elif (referer.startswith(search_key)):
            host = f"{LOCALHOST}:{SERVICES[key]}"
            service_key = key

    return {
        "key": service_key,
        "host": host,
        "path": path,
        "url": f"http://{host}{path}"
    }



# origin is set to the actual machine that made the call not localhost
def request_headers(host) -> dict:
    return {
        "Host": host,
        "Origin": f"http://{host}",
    }

def merge_headers(original: dict, override: dict) -> dict:
    headers = original.copy()
    headers.update(override)
    return headers


# Simplified payment request from:
# https://github.com/trezor/trezor-firmware/blob/master/tests/device_tests/bitcoin/test_signtx_payreq.py

PAYMENT_SIGNER = SigningKey.from_string(
    b"?S\ti\x8b\xc5o{,\xab\x03\x194\xea\xa8[_:\xeb\xdf\xce\xef\xe50\xf17D\x98`\xb9dj",
    curve=SECP256k1,
)

def make_payment_request(
    recipient_name, outputs, slip44
):
    h_pr = sha256(b"SL\x00\x24")
    h_pr.update(b"\0")

    recipient = recipient_name.encode()
    h_pr.update(len(recipient).to_bytes(1, "little"))
    h_pr.update(recipient)

    memos = []
    h_pr.update(len(memos).to_bytes(1, "little"))
    h_pr.update(slip44.to_bytes(4, "little"))

    h_outputs = sha256()
    for txo in outputs:
        h_outputs.update(txo['amount'].to_bytes(8, "little"))
        h_outputs.update(len(txo['address']).to_bytes(1, "little"))
        h_outputs.update(txo['address'].encode())

    h_pr.update(h_outputs.digest())

    return {
        "recipient_name": recipient_name,
        "signature": PAYMENT_SIGNER.sign_digest_deterministic(h_pr.digest()).hex(),
    }

# Proxy server redirects between running services
# Purposes:
# - Allows suite/wallet to access different services from one access point using allowed orgin headers
# - Create /payment-request signature

class Server(TCPServer):
    def __init__(
        self,
        server_address,
        server_port,
    ):
        TCPServer.allow_reuse_address = True
        super().__init__((server_address, server_port), Server.MyHttpRequestHandler)

    def run(self):
        self.serve_forever()

    class MyHttpRequestHandler(SimpleHTTPRequestHandler):

        def return_error_page(self, error_code, message):
            self.send_response(error_code)
            self.send_header("Content-type", "text/html; charset=utf-8")
            self.end_headers()
            self.wfile.write(bytes(message, "utf8"))

        def get_service(self, strip_key = True):
            referer = self.headers.get("referer", "")
            if (referer != ''):
                referer = urlparse(referer).path
            return get_service(self.path, referer, strip_key)

        def send_response_headers(self, headers):
            self.send_header("Access-Control-Allow-Origin", self.headers.get("Access-Control-Allow-Origin", "*"))
            self.send_header("Content-Type", headers.get("Content-Type", ""))
            encoding = headers.get("Content-Encoding", "")
            # NOTE: gzip encoding breaks GET WabiSabi/api/v4/btc requests
            if (encoding != "gzip"):
                self.send_header("Content-Encoding", encoding)

        # TODO: this should be moved to coordinator at some point
        def do_PaymentRequest(self, data):
            params = json.loads(data.decode("utf-8").replace("'",'"'))
            print("Payment request:")
            print(params)
            signature = make_payment_request(params["recipient_name"], params["outputs"], params.get("slip44", 1))
            self.send_response(200)
            self.send_header("Content-Type", "application/json; charset=utf-8")
            self.send_header("Access-Control-Allow-Origin", self.headers.get("Access-Control-Allow-Origin", "*"))
            self.end_headers()
            self.wfile.write(bytes(json.dumps(signature, ensure_ascii=False), 'utf-8'))

        def do_GET(self):
            try:
                service = self.get_service()
                print("do_GET:")
                print(service)
                headers = merge_headers(dict(self.headers), request_headers(service['host']))

                resp = requests.get(url=service['url'], headers=headers)
                self.send_response(resp.status_code)
                self.send_response_headers(resp.headers)
                self.end_headers()

                if (resp.status_code == 200 and resp.headers["Content-Type"].find("text/html") >= 0):
                    content = replace_html_links(resp.text, service['key'])
                    self.wfile.write(str.encode(content))
                else:
                    self.wfile.write(resp.content)

            except Exception as exception:
                exc_type, exc_value, exc_tb = sys.exc_info()
                message = "<br>".join(
                    traceback.format_exception(exc_type, exc_value, exc_tb)
                )
                self.return_error_page(500, message)

        def do_POST(self, body: bool = True) -> None:
            try:
                site = self.path
                data_len = int(self.headers.get("Content-Length", 0))
                data = self.rfile.read(data_len)

                if self.path.startswith("/WabiSabi/payment-request"):
                    self.do_PaymentRequest(data)
                    return

                service = self.get_service(False)  # do not strip prefixes/keys in post requests beacuse of requests with absolute urls like /Wabisabi/status from /Wabisabi/swagger.html
                print("do_POST:")
                print(service)
                headers = merge_headers(dict(self.headers), request_headers(service['host']))
                resp = requests.post(url=service['url'], data=data, headers=headers)

                self.send_response(resp.status_code)
                self.send_response_headers(resp.headers)
                self.end_headers()
                if body:
                    self.wfile.write(resp.content)
            except Exception as e:
                exc_type, exc_value, exc_tb = sys.exc_info()
                message = traceback.format_exception(exc_type, exc_value, exc_tb)
                print(message)
                self.send_error(404, f"Error processing POST: {self.path} Error: {e}")

        def do_OPTIONS(self):
            self.send_response(200, 'ok')
            self.send_header('Access-Control-Allow-Origin', self.headers.get('Access-Control-Allow-Origin', '*'))
            self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
            self.send_header("Access-Control-Allow-Headers", "X-Requested-With")
            self.send_header("Access-Control-Allow-Headers", "Content-Type")
            self.end_headers()

server = Server(
    server_address="0.0.0.0",
    server_port=8081,
)

server.run()
